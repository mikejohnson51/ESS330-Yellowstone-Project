---
title: "ESS330 Yellowstone Project"
authors:
  - name: Sammy Tetrault
    affiliation: CSU
    roles: coding
    corresponding: true
  - name: Zoe Gagalis
    affiliation: CSU
    roles: coding
    corresponding: true
  - name: Zoe Ellis
    affiliation: CSU
    roles: coding
    corresponding: true
bibliography: docs/references.bib
date: "2025-04-10"
format: html
execute:
  echo: true
csl: apa.csl
---
## Data Exploration, all done by Sammy Tetrault
#### Data Description
The data that we are looking at comes from a study conducted by David Cooper and Tom Hobbs of Colorado State University. Their study investigated Salix height as a response to browsing and the water table [@cooper].For our study, we are interested in the relationship between wolf population count and grazer population counts (elk and bison). The first dataset that we are using is a bison data csv which includes date, population count, adult count, and calf count. The second dataset is a wolf data csv which includes site, year, and population count. The third dataset is an elk data csv which includes year, mean population count, and upper and lower confidence intervals. 

#### Opening the data
```{r}
bison_data <- read.csv("C:/Users/sammy/OneDrive/Desktop/ESS330/ESS330-Yellowstone-Project/data/BisonData2000_2023.csv")

elk_data <- read.csv("C:/Users/sammy/OneDrive/Desktop/ESS330/ESS330-Yellowstone-Project/data/corrected_elk_counts_09Jul2023_Park_only.csv")

wolf_data <- read.csv("C:/Users/sammy/OneDrive/Desktop/ESS330/ESS330-Yellowstone-Project/data/wolf_1995_2022_population_ynp_nr_nnrr.csv")
```

#### Cleaning the data
```{r}
library(dplyr)
library(flextable)
library(tidyr)

#reformat the wolf dataset to have a year column rather than each year as its own column
wolf_data <- wolf_data %>%
  pivot_longer(cols = c(X1995:X2021),
               names_to = "year",
               values_to = "wolf_count")

#only keep "Yellowstone National Park" site data
wolf_data <- wolf_data %>%
  filter(Site == "Yellowstone National Park") %>%
  select(year, wolf_count)

#remove X from years 
wolf_data <- wolf_data %>%
  mutate(year = case_when(
                   year == "X1995" ~ 1995,
                   year == "X1996" ~ 1996,
                   year == "X1997" ~ 1997,
                   year == "X1998" ~ 1998,
                   year == "X1999" ~ 1999,
                   year == "X2000" ~ 2000,
                   year == "X2001" ~ 2001,
                   year == "X2002" ~ 2002,
                   year == "X2003" ~ 2003,
                   year == "X2004" ~ 2004,
                   year == "X2005" ~ 2005,
                   year == "X2006" ~ 2006,
                   year == "X2007" ~ 2007,
                   year == "X2008" ~ 2008,
                   year == "X2009" ~ 2009,
                   year == "X2010" ~ 2010,
                   year == "X2011" ~ 2011,
                   year == "X2012" ~ 2012,
                   year == "X2013" ~ 2013,
                   year == "X2014" ~ 2014,
                   year == "X2015" ~ 2015,
                   year == "X2016" ~ 2016,
                   year == "X2017" ~ 2017,
                   year == "X2018" ~ 2018,
                   year == "X2019" ~ 2019,
                   year == "X2020" ~ 2020,
                   year == "X2021" ~ 2021,
                   TRUE ~ as.integer(year)
  ))

#filtering elk data for just year and count columns
elk_data <- elk_data %>%
  select(year, mean)

#filtering bison data for just year and count columns
bison_data <- bison_data %>%
  select(year, total)

#rename columns to count
elk_data <- elk_data %>%
  rename(elk_count = mean)
bison_data <- bison_data %>%
  rename(bison_count = total)


#joining the different tables
data <- full_join(wolf_data, elk_data, by = "year") %>%
  full_join(bison_data, by = "year")

#removing NAs, had to google how to remove commas from bison_count to convert to int
data <- drop_na(data) %>%
  mutate(bison_count = as.integer(gsub(",", "", bison_count)))
```

#### Visualizing the data
```{r}
library(ggplot2)

wolf_pop_plot = ggplot(data = data, aes(x = year, y = wolf_count)) +
  geom_smooth(color = "#1034A6") +
  labs(title = "Yellowstone Wolf Population 2000-2021",
       x = "year",
       y = "wolf count") +
# making axes nicely visible
  theme(axis.title.x = element_text(size = 12),
        axis.title.y = element_text(size = 12),
        axis.text.x = element_text(size = 10, color = "black"),
        axis.text.y = element_text(size = 10, color = "black"),
        axis.line = element_line(color = "black", size = 0.5)) +
  theme_light()

print(wolf_pop_plot)

elk_pop_plot <- ggplot(data = data, aes(x = year, y = elk_count)) +
  geom_smooth(color = "#613613") +
  labs(title = "Yellowstone Elk Population 2000-2021",
       x = "year",
       y = "elk count") +
# making axes nicely visible
  theme(axis.title.x = element_text(size = 12),
        axis.title.y = element_text(size = 12),
        axis.text.x = element_text(size = 10, color = "black"),
        axis.text.y = element_text(size = 10, color = "black"),
        axis.line = element_line(color = "black", size = 0.5)) +
  theme_light()

print(elk_pop_plot)

bison_pop_plot <- ggplot(data = data, aes(x = year, y = bison_count)) +
  geom_smooth(color = "#004100") +
  labs(title = "Yellowstone Bison Population 2000-2021",
       x = "year",
       y = "bison count") +
# making axes nicely visible
  theme(axis.title.x = element_text(size = 12),
        axis.title.y = element_text(size = 12),
        axis.text.x = element_text(size = 10, color = "black"),
        axis.text.y = element_text(size = 10, color = "black"),
        axis.line = element_line(color = "black", size = 0.5)) +
  theme_light()

print(bison_pop_plot)
```

#### Testing the data

First we tested the wolf count data for normality using the Shapiro-Wilk test. This test had a p-value of 5.507e-06, indicating that we should reject the null. The null of this test is that the data is normal, thus this indicates that the wolf population data is not normal.
```{r}
shapiro.test(data$wolf_count)
```
Next, we tested the elk count data using the same test. Again, the p-value was highly significant(2.789e-07). This indicates that the elk population data is also not normal.
```{r}
shapiro.test(data$elk_count)
```
Lastly, we tested the bison count data using the same test. Once again, the p-value was highly significant(0.0005066). This suggests that the bison population data is also not normal. 

```{r}
shapiro.test(data$bison_count)
```
The next test we ran was a QQ test. We generated QQ plots for each population count and from looking at the plots found that while the populations do tend to follow the normal distribution line, there are deviations for all three groups, suggesting non-normality. 
```{r}
# wolf qqplot
library(ggpubr)
wolf_gg = ggqqplot(data$wolf_count) +
  labs(title = "Wolf QQ Plot")

#elk qqplot
library(ggpubr)
elk_gg = ggqqplot(data$elk_count) +
  labs(title = "Elk QQ Plot")

#bison qqplot
library(ggpubr)
bison_gg = ggqqplot(data$bison_count) +
  labs(title = "Bison QQ Plot")

ggarrange(wolf_gg, elk_gg, bison_gg)
```





